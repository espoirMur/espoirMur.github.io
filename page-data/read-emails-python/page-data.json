{"componentChunkName":"component---src-templates-blog-post-js","path":"/read-emails-python/","result":{"data":{"site":{"siteMetadata":{"title":"My ideas' home"}},"markdownRemark":{"id":"222e20c6-2533-5784-98ca-c476c98fa17f","excerpt":"The Problem Recently I received a requirement from a client of mine.\nHe said that I had to write a script that connects to a specific mailbox check every time…","html":"<h3>The Problem</h3>\n<p>Recently I received a requirement from a client of mine.\nHe said that I had to write a script that connects to a specific mailbox check every time if there are new emails, read them, and get the attachments and perform some data analysis on those attachments.\nI was super excited about that, and I asked myself, is it possible to read emails using Python?\nI started googling, and I was lucky to find that it is possible to read emails using Python.\nIn the following blog post, I will explain how I manage to read emails from an IMAP mail server and how I download the attachments and save them into a  specific folder.\nIf you are familiar with Python, this tutorial is for you. To complete this tutorial, you need to have python 3.6 installed in your laptop and virtual environment installed.</p>\n<h4>First thing first create the project and initialize your virtual environement</h4>\n<p>Let us create a project we will be using :\nNavigate to your command line and type the following code :\n<code class=\"language-text\">mkdir read_emails_project &amp; cd read_emails_project</code></p>\n<p>Once in the project, let initialize git :</p>\n<p><code class=\"language-text\">git init</code></p>\n<p>Once we initialized git, let us create a virtual environment:\n<code class=\"language-text\">virtualenv -p python .venv</code></p>\n<p>You can activate the virtual environment with the following lines :</p>\n<p><code class=\"language-text\">source .venv/bin/activate</code></p>\n<p>It’s not a must to use a virtual environment. You can use your preferred environment manager; for me, I prefer to use virtual environments.</p>\n<p>Once you complete the setup up, we can start with the exciting part of the project.</p>\n<h4>Never Write credentials into code, use Environements variables</h4>\n<p>Since we are reading emails from an inbox, we will need email credentials. From where are we reading those credentials?\nOne thing is sure we are not putting them into the code, this is BAD PRACTISE !!! The developer community can put you in jail for writing credentials or secret codes directly into a codebase.\nWe will be using .env file that will be secret to us, and we will never share it with anyone online, even putting it in a private git repository.\nlet us create the .env file\n<code class=\"language-text\">touch .env</code>\nAnd create a gitignore file to tell git which files we are ignoring.\n<code class=\"language-text\">touch .gitignore</code>\nopen the .gitignore and add the following line to it to ignore the env file :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    .venv\n    env</code></pre></div>\n<p>In those lines, we are telling git to ignore our env files and our virtual environments.</p>\n<p>Now we can populate the env file with our credentials :</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">USER_EMAIL=&#39;your@email.com&#39;\nUSER_PASSWORD=&#39;your secret password.&#39;</code></pre></div>\n<p>We create our email credentials; let us write a method that reads them from there.\nFor this, we will be using a Python package called <a href=\"https://github.com/theskumar/python-dotenv\">python-dotenv</a></p>\n<p>let install it with :\n<code class=\"language-text\">pip install -U python-dotenv</code></p>\n<p>let us write a function that reads and return those environment variables : </p>\n<p>You can create a file name <code class=\"language-text\">utils.py</code> and add the following code : </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">from</span> dotenv <span class=\"token keyword\">import</span> load_dotenv\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">read_credentails</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Return users credentials from the environnement variable\n    raise a an exception if the credentials are empty\n    \n    Raises:\n        NotImplementedError: [description]\n    \"\"\"</span>\n    load_dotenv<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    USER_EMAIL <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"USER_EMAIL\"</span><span class=\"token punctuation\">)</span>\n    USER_PASSWORD <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">\"USER_PASSWORD\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> USER_EMAIL <span class=\"token keyword\">and</span> USER_PASSWORD<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> USER_EMAIL<span class=\"token punctuation\">,</span> USER_PASSWORD\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span>'Please add a <span class=\"token punctuation\">.</span>env <span class=\"token builtin\">file</span> <span class=\"token keyword\">and</span> put the credentials on it<span class=\"token punctuation\">,</span>\\\n                         refer to the sample'<span class=\"token punctuation\">)</span></code></pre></div>\n<p>From that function, you can notice that we are using <code class=\"language-text\">load_env</code> function that load the environment variables from our .env files and expose them to system environment variables so we can be able to read them from there.\nAfter reading the environment, variables from the function return them as a tuple.\nIn the next section, we are going to perform the most exciting part of this tutorial it envolves reading mails and download attachments.</p>\n<h4>Reading emails:</h4>\n<p>I was happy to find that Python has a built-in feature that enables us to connect to a mailbox. It comes in the <code class=\"language-text\">imaplib</code> module.\nIt also has utils to parse emails in the <code class=\"language-text\">email</code> module.</p>\n<p>Let create a file <code class=\"language-text\">reading_emails_scripts.py</code> inside it; we are going to perform all the magic we need.</p>\n<p>Let us import the module we need :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> email <span class=\"token keyword\">import</span> message_from_bytes\n<span class=\"token keyword\">from</span> imaplib <span class=\"token keyword\">import</span> IMAP4_SSL\n<span class=\"token keyword\">from</span> <span class=\"token punctuation\">.</span>utils <span class=\"token keyword\">import</span> read_credentails</code></pre></div>\n<p>We are importing the : </p>\n<ul>\n<li>message<em>from</em>bytes function from the email module. It will help us to read the emails which come as bytes and convert them to text.</li>\n<li>IMAP4_SSL: class which is the main class that will help us to perform all the operations\nNote that we are using IMAP4 protocol to read mails IMAP4 is a mail protocol used to access a mailbox on a remote server from a local email client. IMAP can be more complex but provide more convenience for syncing across multiple devices.\nYou can read more about emails protocol <a href=\"https://www.navigator.ca/support/imap-pop3-smtp/\">here</a> </li>\n<li>our read_credentials function, which we introduced in the previous section.</li>\n</ul>\n<p>I have create a funtion that perform the operation and return a generator with all mails found in the mail box , here it is :</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">get_unseen_emails</span><span class=\"token punctuation\">(</span>email_address<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Filter the email and return unseen emails\n    Args:\n        email_address (string): recipient email\n        password (password): recipient password\n    \"\"\"</span>\n    <span class=\"token keyword\">with</span> IMAP4_SSL<span class=\"token punctuation\">(</span><span class=\"token string\">\"your_imap_server\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> mail_connection<span class=\"token punctuation\">:</span>\n        mail_connection<span class=\"token punctuation\">.</span>login<span class=\"token punctuation\">(</span>email_address<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n        mail_connection<span class=\"token punctuation\">.</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        mail_connection<span class=\"token punctuation\">.</span>select<span class=\"token punctuation\">(</span><span class=\"token string\">'INBOX'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span>retcode<span class=\"token punctuation\">,</span> messages<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> mail_connection<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">(</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span>\n            <span class=\"token string\">'(OR (UNSEEN) (FROM your.email@gmail.com))'</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> retcode <span class=\"token operator\">==</span> <span class=\"token string\">'OK'</span> <span class=\"token keyword\">and</span> messages<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span> num <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>messages<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                typ<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> mail_connection<span class=\"token punctuation\">.</span>fetch<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">'(RFC822)'</span><span class=\"token punctuation\">)</span>\n                message <span class=\"token operator\">=</span> message_from_bytes<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n                typ<span class=\"token punctuation\">,</span> data <span class=\"token operator\">=</span> mail_connection<span class=\"token punctuation\">.</span>store<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token string\">'+FLAGS'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\\\\Seen'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">yield</span> message</code></pre></div>\n<p>You can see that we are instaciating a secure mail<em>connection from the IMAP4SSL class and using it with the python context manager.\nWe will be using the mail</em>connection object to perform all the operations we want to our mailbox.</p>\n<p>After instantiating we log in to the mailbox with our credentials, then we list all the mailbox names we have, e.g.: In Google, we have INBOX, SPAM, UPDATES, FORUMS, SPAMS, etc\nWe select only inbox folder, and from the inbox, we filter only unseen messages or coming from your address email.\nNote that you can search for anything in your inbox and even complicated queries.</p>\n<p>The search return retcodes with messages and their IDS\nNote that : </p>\n<blockquote>\n<p>The server assigned messages id to emails, and are implementation-dependent. The IMAP4 >protocol makes a distinction between sequential ids for messages at a given point in time >during a transaction and UID identifiers for messages, but not all servers seem to bother.</p>\n</blockquote>\n<p>Once we have messages ids, we can fetch ids and the format of the headers we want.\nWe are using RFC822 to fetch the entire message as an RFC 2822 formatted message.\nRFC 2822 is a protocol for standard messages send between computers; you can read more about it <a href=\"https://tools.ietf.org/html/rfc2822.html\">here</a></p>\n<p>In the next line, we are using the message<em>from</em>bytes function from the email module to convert the bytes we received as a message.</p>\n<p>Then we mark the message as seen by using the store method\nand we yield the results to our iterator (add an explanation of that )</p>\n<p>Once we have retrieved the emails, let us check the function that gets attachment from that email.</p>\n<h3>Getting attachement from the email:</h3>\n<div class=\"gatsby-highlight\" data-language=\"pyhton\"><pre class=\"language-pyhton\"><code class=\"language-pyhton\">def get_mail_attachments(message, condition_check):\n    &quot;&quot;&quot;\n    Get attachments files from mail\n    Args:\n        message (email ): email object to retrieve attachment from\n        condition_check ([function]): the function to use when filtering the\n        email should return specific condition we are filtering\n    Returns:\n        [filename, file]: the file name, input stream from the files\n    &quot;&quot;&quot;\n    for part in message.walk():\n        if part.get_content_maintype() == &#39;multipart&#39;:\n            continue\n        if not part.get(&#39;Content-Disposition&#39;):\n            continue\n        file_name = part.get_filename()\n        if condition_check(file_name):\n            return part.get_filename(), part.get_payload(decode=1)</code></pre></div>\n<p>This function take the email object yield by the  last function and a filter function which tell which extension we can filter from the email, iterate over all his part using walk() method, for each part we check if the main type is not multipart , and content disposition is  None\n(Need to check this)</p>\n<p>If none of those conditions is satisfied, we get the file name and return the byte stream from the email.</p>\n<h4>Putting everything together:</h4>\n<p>We now have all the building block of the applicaiton let put them in the main function:</p>\n<p>create a file called <code class=\"language-text\">run.py</code> and add the following code inside: </p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> utils <span class=\"token keyword\">import</span> read_credentails\n<span class=\"token keyword\">from</span> reading_emails_scripts <span class=\"token keyword\">import</span> get_mail_attachments<span class=\"token punctuation\">,</span> get_unseen_emails\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n email_address<span class=\"token punctuation\">,</span> password <span class=\"token operator\">=</span> read_credentails<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    messages <span class=\"token operator\">=</span> get_unseen_emails<span class=\"token punctuation\">(</span>email_address<span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> messages<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> message <span class=\"token keyword\">in</span> messages<span class=\"token punctuation\">:</span>\n            attachment <span class=\"token operator\">=</span> get_mail_attachments<span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">,</span>\n                                              <span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">.</span>endswith<span class=\"token punctuation\">(</span><span class=\"token string\">'.xml'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">if</span> attachment<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./data/xml_files/{}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>attachment<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> <span class=\"token builtin\">file</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token builtin\">file</span><span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>attachment<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We can see that call read credentails which return the credentials from the .env file,\nWe call the get<em>unseen</em>emails method which return our messages , we check if the message have attachements with get<em>mail</em>attachment function and if there is an attachement we save it to a folder we like.</p>\n<h3>Conclusion</h3>\n<p>In this tutorial, we went through the whole process of reading emails with Python, we saw how to download attachments from emails, and we put everything together to have a full working script.</p>\n<p>It’s also a good practice to write unit tests to test the code you are writing because I believe that something that is not tested is broken.</p>\n<p>In the next part, we will see how you can write unit tests for this piece of code. So stay tuned for more.</p>\n<p>You can check the code form this tutorial at this GitHub repository.</p>\n<p>Cheers!</p>\n<p>REFerence\n<a href=\"https://pymotw.com/2/imaplib/\">https://pymotw.com/2/imaplib/</a></p>","frontmatter":{"title":"Reading Emails from a Mailbox with python","date":"14 February, 2020","description":"Tutorails on how to read emails in Python"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/read-emails-python/","previous":{"fields":{"slug":"/plans-first-100-days/"},"frontmatter":{"title":"Plan for the first 100 days of 2020"}},"next":null}}}