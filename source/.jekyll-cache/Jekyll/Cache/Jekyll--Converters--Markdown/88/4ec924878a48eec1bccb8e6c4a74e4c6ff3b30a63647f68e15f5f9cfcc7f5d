I"ù˚<h3 id="context">Context</h3>

<p>This was a take home assignment I completed for a Data Scientist/Machine Learning Engineer Role I interviewed for a Big retailer in the UK. I would like to not disclose the name of the company for confidentiality reasons.</p>

<p>Unfortunately , I was not selected for the roles but I got feedback and I applied it on this assignment and I would like to share it with you.</p>

<p>In the rest of this notebook I will use the name <code class="language-bash highlighter-rouge">The Store</code> to reference the company.</p>

<h3 id="other-instruction">Other instruction</h3>

<p>To run this notebook, make sure , you have installed the package mentioned in the <a href="./requirements.txt">requirement</a> file withe their respective versions.</p>

<h3 id="stores-sales-prediction">STORES Sales Prediction</h3>

<h3 id="problem-statement">Problem Statement</h3>

<p>At The store, the location of a retail store plays a huge role in its commercial success. Our Stores Team use various data sources to better understand the potential of candidate locations for new stores in the UK. They need data science help in designing a model that can predict the future sales <strong>[normalised_sales]</strong> of a store based on location characteristics. Your task is to examine the provided dataset and answer the questions below.</p>

<h4 id="dataset-files">Dataset files</h4>

<ul>
  <li><code class="language-bash highlighter-rouge">store-dataset/train.csv</code></li>
  <li><code class="language-bash highlighter-rouge">store-dataset/test.csv</code></li>
</ul>

<h4 id="columns">Columns</h4>

<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">location_id</code>: id of The Store property location</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">normalised_sales</code>: normalised sales value of The store</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">crime_rate</code>: crime rate in the area (higher means more crime)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">household_size</code>: mean household size in the area</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">household_affluency</code>: mean household affluency in the area (higher means more affluent)</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">transport_availability</code>: availability of different transport</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">public_transport_dist</code>: index of public transport availability in the area</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">new_store</code>: new Store store opened recently</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">proportion_nonretail</code>: proportion of non-retail commercial properties in the area</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge"> proportion_flats</code>: proportion of blocks of flats in the area</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">proportion_newbuilds</code>: proportion of newly built property in the area</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">property_value</code>: average property value in the area</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">commercial_property</code>: percentage of commercial properties in the area</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">competitor_density</code>: density of competitor retailers</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">school_proximity</code>: average school proximity in the area</li>
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" checked="checked" /><code class="language-bash highlighter-rouge">county</code>: county code of the area</li>
</ul>

<h2 id="abstract-tldr">Abstract TLDR</h2>

<p>This assignment aimed to predict the number of sales using the different attributes of the store dataset. the training dataset has 315 rows and 14 columns. First, we cleaned the data and removed the columns with missing values. Then , we analyzed the distribution of the data and the correlation between the normalized sales and different attributes. We found that the household ratio, the crime rate, and the property values were highly correlated with the normalised sales.</p>

<p>For the modeling, we preprocessed the data by converting attributes with outliers value to categories and using one-hot encoding for the categorical values.  We also did feature engineering and create a new feature called the household_ratio.</p>

<p>After data preprocessing, we train a decision tree regressor and a random forest regressor and evaluate the model using five-fold cross-validation. We found out that the decision tree model overfit the data; it yields an average mean absolute error of 0.04 on the training set but 0.38 on the average on the validation set. The final random forest model yielded an average of 0.11 mean absolute error on the training set and 0.33 error on the validation set.</p>

<p>We analyzed the errors and found that the mean absolute error has a normal distribution but with outliers. As part of the model‚Äôs improvement, we suggest analyzing the data point where the model made high mean absolute errors, training a separate model with those values, and combining the results at the end.</p>

<p>For usage of the model, while we would recommend the decision tree to the product managers and business people to explain how the model works, we will consider using the random forest to make the final prediction.</p>

<h2 id="exploratory-data-analysis">Exploratory Data Analysis</h2>

<p>Before diving into the modelling, you are given the dataset and The Stores team expect you to come back with an analysis of the data and any concerns you may have about it. They would also like to know which other information you think would be useful to collect for future developments.</p>

<h3 id="how-i-did-on-this-question">How I did on this question:</h3>

<p>Here is the feedback I got from The Stores team:</p>

<h4 id="positives">Positives:</h4>

<p>You did some clever feature engineering with household features, combining them to increase predictive power</p>

<h4 id="negatives">Negatives:</h4>

<p>Unfortunately you wrongly interpreted negative normalized sales as store‚Äôs losses .</p>

<p>My response, I think I should have asked for more clarification about how they interpret the normalized sales losses, it a big mistake and cost me a lot.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">warnings</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">filterwarnings</span><span class="p">(</span><span class="s">'ignore'</span><span class="p">)</span>
<span class="n">warnings</span><span class="p">.</span><span class="n">simplefilter</span><span class="p">(</span><span class="s">'ignore'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">skew</span><span class="p">,</span><span class="n">norm</span>  <span class="c1"># for some statistics
</span><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">seaborn</span> <span class="k">as</span> <span class="n">sns</span>
<span class="kn">from</span> <span class="nn">pathlib</span> <span class="kn">import</span> <span class="n">Path</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">data_directory</span> <span class="o">=</span> <span class="n">Path</span><span class="p">.</span><span class="n">cwd</span><span class="p">().</span><span class="n">joinpath</span><span class="p">(</span><span class="s">'data'</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">data_directory</span><span class="p">.</span><span class="n">exists</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_dataset</span> <span class="o">=</span> <span class="n">data_directory</span><span class="p">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s">"store-dataset"</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">store_dataset</span><span class="p">.</span><span class="n">exists</span><span class="p">()</span>
<span class="n">train_file</span> <span class="o">=</span> <span class="n">store_dataset</span><span class="p">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s">"train.csv"</span><span class="p">)</span>
<span class="n">test_file</span> <span class="o">=</span> <span class="n">store_dataset</span><span class="p">.</span><span class="n">joinpath</span><span class="p">(</span><span class="s">"test.csv"</span><span class="p">)</span>
<span class="k">assert</span> <span class="n">train_file</span><span class="p">.</span><span class="n">exists</span><span class="p">()</span>
<span class="k">assert</span> <span class="n">test_file</span><span class="p">.</span><span class="n">exists</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="n">train_file</span><span class="p">)</span>
<span class="n">store_df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>location_id</th>
      <th>crime_rate</th>
      <th>proportion_flats</th>
      <th>proportion_nonretail</th>
      <th>new_store</th>
      <th>commercial_property</th>
      <th>household_size</th>
      <th>proportion_newbuilds</th>
      <th>public_transport_dist</th>
      <th>transport_availability</th>
      <th>property_value</th>
      <th>school_proximity</th>
      <th>competitor_density</th>
      <th>household_affluency</th>
      <th>normalised_sales</th>
      <th>county</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>464</td>
      <td>17.600541</td>
      <td>0.0</td>
      <td>18.10</td>
      <td>no</td>
      <td>NaN</td>
      <td>2.926</td>
      <td>29.0</td>
      <td>2.9084</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>368.74</td>
      <td>4.5325</td>
      <td>-0.399933</td>
      <td>c_40</td>
    </tr>
    <tr>
      <th>1</th>
      <td>504</td>
      <td>0.603556</td>
      <td>20.0</td>
      <td>3.97</td>
      <td>no</td>
      <td>14.85</td>
      <td>4.520</td>
      <td>10.6</td>
      <td>2.1398</td>
      <td>Average transport options</td>
      <td>264</td>
      <td>13.0</td>
      <td>388.37</td>
      <td>1.8150</td>
      <td>2.216308</td>
      <td>c_80</td>
    </tr>
    <tr>
      <th>2</th>
      <td>295</td>
      <td>0.606810</td>
      <td>0.0</td>
      <td>6.20</td>
      <td>no</td>
      <td>7.70</td>
      <td>2.981</td>
      <td>31.9</td>
      <td>3.6715</td>
      <td>Many transport options</td>
      <td>307</td>
      <td>17.4</td>
      <td>378.35</td>
      <td>2.9125</td>
      <td>0.166920</td>
      <td>c_53</td>
    </tr>
    <tr>
      <th>3</th>
      <td>187</td>
      <td>0.012385</td>
      <td>55.0</td>
      <td>2.25</td>
      <td>no</td>
      <td>1.95</td>
      <td>3.453</td>
      <td>68.1</td>
      <td>7.3073</td>
      <td>No transport options</td>
      <td>300</td>
      <td>15.3</td>
      <td>394.72</td>
      <td>2.0575</td>
      <td>-0.083804</td>
      <td>c_65</td>
    </tr>
    <tr>
      <th>4</th>
      <td>193</td>
      <td>0.016182</td>
      <td>100.0</td>
      <td>1.32</td>
      <td>no</td>
      <td>3.05</td>
      <td>3.816</td>
      <td>59.5</td>
      <td>8.3248</td>
      <td>Average transport options</td>
      <td>256</td>
      <td>15.1</td>
      <td>392.90</td>
      <td>0.9875</td>
      <td>0.962693</td>
      <td>c_97</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">describe</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>location_id</th>
      <th>crime_rate</th>
      <th>proportion_flats</th>
      <th>proportion_nonretail</th>
      <th>commercial_property</th>
      <th>household_size</th>
      <th>proportion_newbuilds</th>
      <th>public_transport_dist</th>
      <th>property_value</th>
      <th>school_proximity</th>
      <th>competitor_density</th>
      <th>household_affluency</th>
      <th>normalised_sales</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>320.000000</td>
      <td>320.000000</td>
      <td>320.000000</td>
      <td>320.000000</td>
      <td>291.000000</td>
      <td>320.000000</td>
      <td>320.000000</td>
      <td>320.000000</td>
      <td>320.000000</td>
      <td>257.000000</td>
      <td>320.000000</td>
      <td>320.000000</td>
      <td>320.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>252.387500</td>
      <td>3.596375</td>
      <td>10.673438</td>
      <td>11.307906</td>
      <td>16.868557</td>
      <td>3.252803</td>
      <td>31.849063</td>
      <td>3.718765</td>
      <td>408.834375</td>
      <td>18.589494</td>
      <td>359.657562</td>
      <td>3.144008</td>
      <td>-0.016967</td>
    </tr>
    <tr>
      <th>std</th>
      <td>145.600582</td>
      <td>7.176342</td>
      <td>22.579232</td>
      <td>7.032693</td>
      <td>73.806051</td>
      <td>0.695442</td>
      <td>27.845777</td>
      <td>1.984765</td>
      <td>170.888974</td>
      <td>2.075529</td>
      <td>86.048632</td>
      <td>1.774041</td>
      <td>0.978561</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
      <td>0.007142</td>
      <td>0.000000</td>
      <td>0.740000</td>
      <td>1.750000</td>
      <td>0.561000</td>
      <td>0.000000</td>
      <td>1.137000</td>
      <td>188.000000</td>
      <td>13.000000</td>
      <td>3.500000</td>
      <td>0.432500</td>
      <td>-1.936974</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>126.500000</td>
      <td>0.087937</td>
      <td>0.000000</td>
      <td>5.130000</td>
      <td>5.450000</td>
      <td>2.879750</td>
      <td>6.350000</td>
      <td>2.138075</td>
      <td>277.000000</td>
      <td>17.400000</td>
      <td>376.722500</td>
      <td>1.803750</td>
      <td>-0.585250</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>251.500000</td>
      <td>0.289681</td>
      <td>0.000000</td>
      <td>9.900000</td>
      <td>9.400000</td>
      <td>3.197500</td>
      <td>23.400000</td>
      <td>3.095750</td>
      <td>330.000000</td>
      <td>19.100000</td>
      <td>392.205000</td>
      <td>2.808750</td>
      <td>-0.143759</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>377.250000</td>
      <td>4.063553</td>
      <td>12.500000</td>
      <td>18.100000</td>
      <td>14.050000</td>
      <td>3.597250</td>
      <td>54.450000</td>
      <td>5.116700</td>
      <td>666.000000</td>
      <td>20.200000</td>
      <td>396.352500</td>
      <td>4.091875</td>
      <td>0.243227</td>
    </tr>
    <tr>
      <th>max</th>
      <td>506.000000</td>
      <td>51.693093</td>
      <td>100.000000</td>
      <td>27.740000</td>
      <td>1009.000000</td>
      <td>5.725000</td>
      <td>94.000000</td>
      <td>10.710300</td>
      <td>711.000000</td>
      <td>21.200000</td>
      <td>396.900000</td>
      <td>9.492500</td>
      <td>2.968477</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">"location_id"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>crime_rate</th>
      <th>proportion_flats</th>
      <th>proportion_nonretail</th>
      <th>new_store</th>
      <th>commercial_property</th>
      <th>household_size</th>
      <th>proportion_newbuilds</th>
      <th>public_transport_dist</th>
      <th>transport_availability</th>
      <th>property_value</th>
      <th>school_proximity</th>
      <th>competitor_density</th>
      <th>household_affluency</th>
      <th>normalised_sales</th>
      <th>county</th>
    </tr>
    <tr>
      <th>location_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>464</th>
      <td>17.600541</td>
      <td>0.0</td>
      <td>18.10</td>
      <td>no</td>
      <td>NaN</td>
      <td>2.926</td>
      <td>29.0</td>
      <td>2.9084</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>368.74</td>
      <td>4.5325</td>
      <td>-0.399933</td>
      <td>c_40</td>
    </tr>
    <tr>
      <th>504</th>
      <td>0.603556</td>
      <td>20.0</td>
      <td>3.97</td>
      <td>no</td>
      <td>14.85</td>
      <td>4.520</td>
      <td>10.6</td>
      <td>2.1398</td>
      <td>Average transport options</td>
      <td>264</td>
      <td>13.0</td>
      <td>388.37</td>
      <td>1.8150</td>
      <td>2.216308</td>
      <td>c_80</td>
    </tr>
    <tr>
      <th>295</th>
      <td>0.606810</td>
      <td>0.0</td>
      <td>6.20</td>
      <td>no</td>
      <td>7.70</td>
      <td>2.981</td>
      <td>31.9</td>
      <td>3.6715</td>
      <td>Many transport options</td>
      <td>307</td>
      <td>17.4</td>
      <td>378.35</td>
      <td>2.9125</td>
      <td>0.166920</td>
      <td>c_53</td>
    </tr>
    <tr>
      <th>187</th>
      <td>0.012385</td>
      <td>55.0</td>
      <td>2.25</td>
      <td>no</td>
      <td>1.95</td>
      <td>3.453</td>
      <td>68.1</td>
      <td>7.3073</td>
      <td>No transport options</td>
      <td>300</td>
      <td>15.3</td>
      <td>394.72</td>
      <td>2.0575</td>
      <td>-0.083804</td>
      <td>c_65</td>
    </tr>
    <tr>
      <th>193</th>
      <td>0.016182</td>
      <td>100.0</td>
      <td>1.32</td>
      <td>no</td>
      <td>3.05</td>
      <td>3.816</td>
      <td>59.5</td>
      <td>8.3248</td>
      <td>Average transport options</td>
      <td>256</td>
      <td>15.1</td>
      <td>392.90</td>
      <td>0.9875</td>
      <td>0.962693</td>
      <td>c_97</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">visualize_attribute</span><span class="p">(</span><span class="n">attribute_name</span><span class="p">,</span> <span class="n">x_range</span><span class="o">=</span><span class="mi">5</span><span class="p">,</span> <span class="n">store_df</span><span class="o">=</span><span class="n">store_df</span><span class="p">):</span>
    <span class="s">"""plot the boxplot and the hsitorogram of an attribute

    Args:
        attribute_name (_type_): the attribute name to plot
    """</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">6</span><span class="p">),</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">plot</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">distplot</span><span class="p">(</span><span class="n">store_df</span><span class="p">[</span><span class="n">attribute_name</span><span class="p">],</span><span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">fit</span><span class="o">=</span><span class="n">norm</span><span class="p">)</span>
    <span class="n">box_plot</span> <span class="o">=</span> <span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span> <span class="n">y</span><span class="o">=</span><span class="n">store_df</span><span class="p">[</span><span class="n">attribute_name</span><span class="p">],</span> <span class="n">ax</span><span class="o">=</span><span class="n">axes</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">ticks</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="n">store_df</span><span class="p">[</span><span class="n">attribute_name</span><span class="p">].</span><span class="nb">min</span><span class="p">(),</span> <span class="n">store_df</span><span class="p">[</span><span class="n">attribute_name</span><span class="p">].</span><span class="nb">max</span><span class="p">(),</span> <span class="n">x_range</span><span class="p">))</span>
</code></pre></div></div>

<h2 id="exploratory-data-analysis-1">Exploratory Data Analysis</h2>

<p>In this step, we will perform exploratory data analysis; for each column, we will check for missing values, outliers,  the value distribution, and how they are the correlation between them and the target values.</p>

<p>By the end of this step, we will find out the variables that are mainly correlated with the number of sales.</p>

<h3 id="the-target-variable--normalised-sales">The Target Variable : Normalised Sales</h3>

<p>For this problem,  we are predicting the normalized sales of a store. The normalized sale can be positive or negative.</p>
<strike>
 From our understanding, a negative normalized sales mean loss and a positive normalized sales mean gain. A loss happens when a store has products it was supposed to sell in a given period but didn't sell them and has to clear the items from the store. A gain or a positive value of normalized sales is when the product was sold in the given period, resulting in a profit for store.
</strike>

<p>That is the paragraph that cost me point in this section . I should have also added that I am not sure about that and I will need more clarification.</p>

<h3 id="information-about-the-dataset">Information about the dataset</h3>

<p>We can see that our dataset has  rows and  columns. We can consider this a small dataset.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">x_range</span><span class="o">=</span><span class="p">.</span><span class="mi">8</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_17_0.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">normalised_sales</span><span class="p">.</span><span class="n">std</span><span class="p">().</span><span class="nb">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.98
</code></pre></div></div>

<p>As per the plot we can see that sales values follow a normal distribution centered around , and with  a standard deviation of .</p>

<h3 id="missing-values-computation">Missing values Computation</h3>

<p>Since we don‚Äôt have any reasons  for the missing values , we will use different missing values computation methods and then compare the effect of that on the predictor variable.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">isnull</span><span class="p">().</span><span class="nb">sum</span><span class="p">())</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crime_rate                 0
proportion_flats           0
proportion_nonretail       0
new_store                  0
commercial_property       29
household_size             0
proportion_newbuilds       0
public_transport_dist      0
transport_availability     0
property_value             0
school_proximity          63
competitor_density         0
household_affluency        0
normalised_sales           0
county                     0
dtype: int64
</code></pre></div></div>

<p>From that we can see that the columns school proximity and the commercial property have missing values which are 10 % of the values for the commercial property and 20 % for the school proximity.</p>

<p>In the next step we will have a closer look on those values to find how to deal with them.</p>

<h4 id="possible-reason-for-missing-values">Possible Reason for Missing Values</h4>

<p>For recall , let us note what are three main reason for missing values in the data according to the mechanism of  missingness.</p>

<ul>
  <li>Missing completely at Random:  is defined as when the probability that the data are missing is not related to either the specific value which is supposed to be obtained or the set of observed responses.</li>
  <li>Missing at Random : ) is a more realistic assumption for the studies performed in the anesthetic field. Data are regarded to be MAR when the probability that the responses are missing depends on the set of observed responses, but is not related to the specific missing values which is expected to be obtained.</li>
  <li>Missing not at Random: If the characters of the data do not meet those of MCAR or MAR, then they fall into the category of missing not at random (MNAR).</li>
</ul>

<p>Upon looking at the dataset, there seems to be  a valid reason for the missing values in the two columns, there seems to be missing at random. So now, we cannot decide the best method to deal with those missing values after looking at each variable separately.</p>

<p>Next we will analyze correlation between variables and the target variable , then we will analyze each variable separately.</p>

<h3 id="correlation-analysis">Correlation Analysis</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">correlation_matrix</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">corr</span><span class="p">(</span><span class="n">method</span><span class="o">=</span><span class="s">'pearson'</span><span class="p">)</span>
<span class="n">mask</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros_like</span><span class="p">(</span><span class="n">correlation_matrix</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="nb">bool</span><span class="p">)</span>
<span class="n">mask</span><span class="p">[</span><span class="n">np</span><span class="p">.</span><span class="n">triu_indices_from</span><span class="p">(</span><span class="n">mask</span><span class="p">)]</span> <span class="o">=</span> <span class="bp">True</span>
<span class="n">correlation_matrix</span><span class="p">[</span><span class="n">mask</span><span class="p">]</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">nan</span>
<span class="p">(</span><span class="n">correlation_matrix</span>
 <span class="p">.</span><span class="n">style</span>
 <span class="p">.</span><span class="n">background_gradient</span><span class="p">(</span><span class="n">cmap</span><span class="o">=</span><span class="s">'coolwarm'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">vmin</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span> <span class="n">vmax</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
 <span class="p">.</span><span class="n">highlight_null</span><span class="p">(</span><span class="n">null_color</span><span class="o">=</span><span class="s">'#f1f1f1'</span><span class="p">)</span>  <span class="c1"># Color NaNs grey
</span> <span class="p">.</span><span class="n">set_precision</span><span class="p">(</span><span class="mi">2</span><span class="p">))</span>
</code></pre></div></div>

<style type="text/css">
#T_d7db2_row0_col0, #T_d7db2_row0_col1, #T_d7db2_row0_col2, #T_d7db2_row0_col3, #T_d7db2_row0_col4, #T_d7db2_row0_col5, #T_d7db2_row0_col6, #T_d7db2_row0_col7, #T_d7db2_row0_col8, #T_d7db2_row0_col9, #T_d7db2_row0_col10, #T_d7db2_row0_col11, #T_d7db2_row1_col1, #T_d7db2_row1_col2, #T_d7db2_row1_col3, #T_d7db2_row1_col4, #T_d7db2_row1_col5, #T_d7db2_row1_col6, #T_d7db2_row1_col7, #T_d7db2_row1_col8, #T_d7db2_row1_col9, #T_d7db2_row1_col10, #T_d7db2_row1_col11, #T_d7db2_row2_col2, #T_d7db2_row2_col3, #T_d7db2_row2_col4, #T_d7db2_row2_col5, #T_d7db2_row2_col6, #T_d7db2_row2_col7, #T_d7db2_row2_col8, #T_d7db2_row2_col9, #T_d7db2_row2_col10, #T_d7db2_row2_col11, #T_d7db2_row3_col3, #T_d7db2_row3_col4, #T_d7db2_row3_col5, #T_d7db2_row3_col6, #T_d7db2_row3_col7, #T_d7db2_row3_col8, #T_d7db2_row3_col9, #T_d7db2_row3_col10, #T_d7db2_row3_col11, #T_d7db2_row4_col4, #T_d7db2_row4_col5, #T_d7db2_row4_col6, #T_d7db2_row4_col7, #T_d7db2_row4_col8, #T_d7db2_row4_col9, #T_d7db2_row4_col10, #T_d7db2_row4_col11, #T_d7db2_row5_col5, #T_d7db2_row5_col6, #T_d7db2_row5_col7, #T_d7db2_row5_col8, #T_d7db2_row5_col9, #T_d7db2_row5_col10, #T_d7db2_row5_col11, #T_d7db2_row6_col6, #T_d7db2_row6_col7, #T_d7db2_row6_col8, #T_d7db2_row6_col9, #T_d7db2_row6_col10, #T_d7db2_row6_col11, #T_d7db2_row7_col7, #T_d7db2_row7_col8, #T_d7db2_row7_col9, #T_d7db2_row7_col10, #T_d7db2_row7_col11, #T_d7db2_row8_col8, #T_d7db2_row8_col9, #T_d7db2_row8_col10, #T_d7db2_row8_col11, #T_d7db2_row9_col9, #T_d7db2_row9_col10, #T_d7db2_row9_col11, #T_d7db2_row10_col10, #T_d7db2_row10_col11, #T_d7db2_row11_col11 {
  background-color: #000000;
  color: #f1f1f1;
  background-color: #f1f1f1;
}
#T_d7db2_row1_col0 {
  background-color: #bbd1f8;
  color: #000000;
}
#T_d7db2_row2_col0 {
  background-color: #f6a283;
  color: #000000;
}
#T_d7db2_row2_col1 {
  background-color: #89acfd;
  color: #000000;
}
#T_d7db2_row3_col0, #T_d7db2_row3_col2, #T_d7db2_row7_col3, #T_d7db2_row10_col3 {
  background-color: #e3d9d3;
  color: #000000;
}
#T_d7db2_row3_col1 {
  background-color: #d2dbe8;
  color: #000000;
}
#T_d7db2_row4_col0, #T_d7db2_row7_col4, #T_d7db2_row10_col9 {
  background-color: #a6c4fe;
  color: #000000;
}
#T_d7db2_row4_col1 {
  background-color: #f7b89c;
  color: #000000;
}
#T_d7db2_row4_col2, #T_d7db2_row6_col0, #T_d7db2_row9_col0 {
  background-color: #98b9ff;
  color: #000000;
}
#T_d7db2_row4_col3, #T_d7db2_row6_col3 {
  background-color: #d8dce2;
  color: #000000;
}
#T_d7db2_row5_col0 {
  background-color: #9dbdff;
  color: #000000;
}
#T_d7db2_row5_col1 {
  background-color: #f18f71;
  color: #f1f1f1;
}
#T_d7db2_row5_col2 {
  background-color: #7396f5;
  color: #f1f1f1;
}
#T_d7db2_row5_col3 {
  background-color: #d6dce4;
  color: #000000;
}
#T_d7db2_row5_col4 {
  background-color: #f5c2aa;
  color: #000000;
}
#T_d7db2_row6_col1 {
  background-color: #ea7b60;
  color: #f1f1f1;
}
#T_d7db2_row6_col2 {
  background-color: #6a8bef;
  color: #f1f1f1;
}
#T_d7db2_row6_col4 {
  background-color: #f5c0a7;
  color: #000000;
}
#T_d7db2_row6_col5 {
  background-color: #dc5d4a;
  color: #f1f1f1;
}
#T_d7db2_row7_col0 {
  background-color: #e67259;
  color: #f1f1f1;
}
#T_d7db2_row7_col1, #T_d7db2_row8_col5 {
  background-color: #aec9fc;
  color: #000000;
}
#T_d7db2_row7_col2 {
  background-color: #e36c55;
  color: #f1f1f1;
}
#T_d7db2_row7_col5, #T_d7db2_row10_col6 {
  background-color: #8badfd;
  color: #000000;
}
#T_d7db2_row7_col6 {
  background-color: #88abfd;
  color: #000000;
}
#T_d7db2_row8_col0, #T_d7db2_row11_col9 {
  background-color: #f7b79b;
  color: #000000;
}
#T_d7db2_row8_col1 {
  background-color: #a1c0ff;
  color: #000000;
}
#T_d7db2_row8_col2 {
  background-color: #f7a688;
  color: #000000;
}
#T_d7db2_row8_col3 {
  background-color: #e0dbd8;
  color: #000000;
}
#T_d7db2_row8_col4 {
  background-color: #b2ccfb;
  color: #000000;
}
#T_d7db2_row8_col6 {
  background-color: #b6cefa;
  color: #000000;
}
#T_d7db2_row8_col7 {
  background-color: #f59d7e;
  color: #000000;
}
#T_d7db2_row9_col1 {
  background-color: #efcebd;
  color: #000000;
}
#T_d7db2_row9_col2 {
  background-color: #aac7fd;
  color: #000000;
}
#T_d7db2_row9_col3 {
  background-color: #dddcdc;
  color: #000000;
}
#T_d7db2_row9_col4 {
  background-color: #eed0c0;
  color: #000000;
}
#T_d7db2_row9_col5, #T_d7db2_row11_col6 {
  background-color: #f5c1a9;
  color: #000000;
}
#T_d7db2_row9_col6 {
  background-color: #f6bfa6;
  color: #000000;
}
#T_d7db2_row9_col7 {
  background-color: #9ebeff;
  color: #000000;
}
#T_d7db2_row9_col8 {
  background-color: #c1d4f4;
  color: #000000;
}
#T_d7db2_row10_col0 {
  background-color: #ee8669;
  color: #f1f1f1;
}
#T_d7db2_row10_col1 {
  background-color: #9fbfff;
  color: #000000;
}
#T_d7db2_row10_col2 {
  background-color: #ec7f63;
  color: #f1f1f1;
}
#T_d7db2_row10_col4 {
  background-color: #779af7;
  color: #f1f1f1;
}
#T_d7db2_row10_col5 {
  background-color: #7da0f9;
  color: #f1f1f1;
}
#T_d7db2_row10_col7 {
  background-color: #f29072;
  color: #f1f1f1;
}
#T_d7db2_row10_col8 {
  background-color: #f7b599;
  color: #000000;
}
#T_d7db2_row11_col0 {
  background-color: #97b8ff;
  color: #000000;
}
#T_d7db2_row11_col1 {
  background-color: #f7b497;
  color: #000000;
}
#T_d7db2_row11_col2 {
  background-color: #8fb1fe;
  color: #000000;
}
#T_d7db2_row11_col3 {
  background-color: #d4dbe6;
  color: #000000;
}
#T_d7db2_row11_col4 {
  background-color: #e46e56;
  color: #f1f1f1;
}
#T_d7db2_row11_col5 {
  background-color: #f7b093;
  color: #000000;
}
#T_d7db2_row11_col7 {
  background-color: #93b5fe;
  color: #000000;
}
#T_d7db2_row11_col8 {
  background-color: #96b7ff;
  color: #000000;
}
#T_d7db2_row11_col10 {
  background-color: #6282ea;
  color: #f1f1f1;
}
</style>

<table id="T_d7db2_">
  <thead>
    <tr>
      <th class="blank level0">&nbsp;</th>
      <th class="col_heading level0 col0">crime_rate</th>
      <th class="col_heading level0 col1">proportion_flats</th>
      <th class="col_heading level0 col2">proportion_nonretail</th>
      <th class="col_heading level0 col3">commercial_property</th>
      <th class="col_heading level0 col4">household_size</th>
      <th class="col_heading level0 col5">proportion_newbuilds</th>
      <th class="col_heading level0 col6">public_transport_dist</th>
      <th class="col_heading level0 col7">property_value</th>
      <th class="col_heading level0 col8">school_proximity</th>
      <th class="col_heading level0 col9">competitor_density</th>
      <th class="col_heading level0 col10">household_affluency</th>
      <th class="col_heading level0 col11">normalised_sales</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th id="T_d7db2_level0_row0" class="row_heading level0 row0">crime_rate</th>
      <td id="T_d7db2_row0_col0" class="data row0 col0">nan</td>
      <td id="T_d7db2_row0_col1" class="data row0 col1">nan</td>
      <td id="T_d7db2_row0_col2" class="data row0 col2">nan</td>
      <td id="T_d7db2_row0_col3" class="data row0 col3">nan</td>
      <td id="T_d7db2_row0_col4" class="data row0 col4">nan</td>
      <td id="T_d7db2_row0_col5" class="data row0 col5">nan</td>
      <td id="T_d7db2_row0_col6" class="data row0 col6">nan</td>
      <td id="T_d7db2_row0_col7" class="data row0 col7">nan</td>
      <td id="T_d7db2_row0_col8" class="data row0 col8">nan</td>
      <td id="T_d7db2_row0_col9" class="data row0 col9">nan</td>
      <td id="T_d7db2_row0_col10" class="data row0 col10">nan</td>
      <td id="T_d7db2_row0_col11" class="data row0 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row1" class="row_heading level0 row1">proportion_flats</th>
      <td id="T_d7db2_row1_col0" class="data row1 col0">-0.23</td>
      <td id="T_d7db2_row1_col1" class="data row1 col1">nan</td>
      <td id="T_d7db2_row1_col2" class="data row1 col2">nan</td>
      <td id="T_d7db2_row1_col3" class="data row1 col3">nan</td>
      <td id="T_d7db2_row1_col4" class="data row1 col4">nan</td>
      <td id="T_d7db2_row1_col5" class="data row1 col5">nan</td>
      <td id="T_d7db2_row1_col6" class="data row1 col6">nan</td>
      <td id="T_d7db2_row1_col7" class="data row1 col7">nan</td>
      <td id="T_d7db2_row1_col8" class="data row1 col8">nan</td>
      <td id="T_d7db2_row1_col9" class="data row1 col9">nan</td>
      <td id="T_d7db2_row1_col10" class="data row1 col10">nan</td>
      <td id="T_d7db2_row1_col11" class="data row1 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row2" class="row_heading level0 row2">proportion_nonretail</th>
      <td id="T_d7db2_row2_col0" class="data row2 col0">0.46</td>
      <td id="T_d7db2_row2_col1" class="data row2 col1">-0.52</td>
      <td id="T_d7db2_row2_col2" class="data row2 col2">nan</td>
      <td id="T_d7db2_row2_col3" class="data row2 col3">nan</td>
      <td id="T_d7db2_row2_col4" class="data row2 col4">nan</td>
      <td id="T_d7db2_row2_col5" class="data row2 col5">nan</td>
      <td id="T_d7db2_row2_col6" class="data row2 col6">nan</td>
      <td id="T_d7db2_row2_col7" class="data row2 col7">nan</td>
      <td id="T_d7db2_row2_col8" class="data row2 col8">nan</td>
      <td id="T_d7db2_row2_col9" class="data row2 col9">nan</td>
      <td id="T_d7db2_row2_col10" class="data row2 col10">nan</td>
      <td id="T_d7db2_row2_col11" class="data row2 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row3" class="row_heading level0 row3">commercial_property</th>
      <td id="T_d7db2_row3_col0" class="data row3 col0">0.05</td>
      <td id="T_d7db2_row3_col1" class="data row3 col1">-0.08</td>
      <td id="T_d7db2_row3_col2" class="data row3 col2">0.05</td>
      <td id="T_d7db2_row3_col3" class="data row3 col3">nan</td>
      <td id="T_d7db2_row3_col4" class="data row3 col4">nan</td>
      <td id="T_d7db2_row3_col5" class="data row3 col5">nan</td>
      <td id="T_d7db2_row3_col6" class="data row3 col6">nan</td>
      <td id="T_d7db2_row3_col7" class="data row3 col7">nan</td>
      <td id="T_d7db2_row3_col8" class="data row3 col8">nan</td>
      <td id="T_d7db2_row3_col9" class="data row3 col9">nan</td>
      <td id="T_d7db2_row3_col10" class="data row3 col10">nan</td>
      <td id="T_d7db2_row3_col11" class="data row3 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row4" class="row_heading level0 row4">household_size</th>
      <td id="T_d7db2_row4_col0" class="data row4 col0">-0.35</td>
      <td id="T_d7db2_row4_col1" class="data row4 col1">0.33</td>
      <td id="T_d7db2_row4_col2" class="data row4 col2">-0.44</td>
      <td id="T_d7db2_row4_col3" class="data row4 col3">-0.04</td>
      <td id="T_d7db2_row4_col4" class="data row4 col4">nan</td>
      <td id="T_d7db2_row4_col5" class="data row4 col5">nan</td>
      <td id="T_d7db2_row4_col6" class="data row4 col6">nan</td>
      <td id="T_d7db2_row4_col7" class="data row4 col7">nan</td>
      <td id="T_d7db2_row4_col8" class="data row4 col8">nan</td>
      <td id="T_d7db2_row4_col9" class="data row4 col9">nan</td>
      <td id="T_d7db2_row4_col10" class="data row4 col10">nan</td>
      <td id="T_d7db2_row4_col11" class="data row4 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row5" class="row_heading level0 row5">proportion_newbuilds</th>
      <td id="T_d7db2_row5_col0" class="data row5 col0">-0.41</td>
      <td id="T_d7db2_row5_col1" class="data row5 col1">0.55</td>
      <td id="T_d7db2_row5_col2" class="data row5 col2">-0.64</td>
      <td id="T_d7db2_row5_col3" class="data row5 col3">-0.05</td>
      <td id="T_d7db2_row5_col4" class="data row5 col4">0.26</td>
      <td id="T_d7db2_row5_col5" class="data row5 col5">nan</td>
      <td id="T_d7db2_row5_col6" class="data row5 col6">nan</td>
      <td id="T_d7db2_row5_col7" class="data row5 col7">nan</td>
      <td id="T_d7db2_row5_col8" class="data row5 col8">nan</td>
      <td id="T_d7db2_row5_col9" class="data row5 col9">nan</td>
      <td id="T_d7db2_row5_col10" class="data row5 col10">nan</td>
      <td id="T_d7db2_row5_col11" class="data row5 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row6" class="row_heading level0 row6">public_transport_dist</th>
      <td id="T_d7db2_row6_col0" class="data row6 col0">-0.43</td>
      <td id="T_d7db2_row6_col1" class="data row6 col1">0.64</td>
      <td id="T_d7db2_row6_col2" class="data row6 col2">-0.70</td>
      <td id="T_d7db2_row6_col3" class="data row6 col3">-0.04</td>
      <td id="T_d7db2_row6_col4" class="data row6 col4">0.28</td>
      <td id="T_d7db2_row6_col5" class="data row6 col5">0.76</td>
      <td id="T_d7db2_row6_col6" class="data row6 col6">nan</td>
      <td id="T_d7db2_row6_col7" class="data row6 col7">nan</td>
      <td id="T_d7db2_row6_col8" class="data row6 col8">nan</td>
      <td id="T_d7db2_row6_col9" class="data row6 col9">nan</td>
      <td id="T_d7db2_row6_col10" class="data row6 col10">nan</td>
      <td id="T_d7db2_row6_col11" class="data row6 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row7" class="row_heading level0 row7">property_value</th>
      <td id="T_d7db2_row7_col0" class="data row7 col0">0.67</td>
      <td id="T_d7db2_row7_col1" class="data row7 col1">-0.31</td>
      <td id="T_d7db2_row7_col2" class="data row7 col2">0.70</td>
      <td id="T_d7db2_row7_col3" class="data row7 col3">0.05</td>
      <td id="T_d7db2_row7_col4" class="data row7 col4">-0.36</td>
      <td id="T_d7db2_row7_col5" class="data row7 col5">-0.51</td>
      <td id="T_d7db2_row7_col6" class="data row7 col6">-0.52</td>
      <td id="T_d7db2_row7_col7" class="data row7 col7">nan</td>
      <td id="T_d7db2_row7_col8" class="data row7 col8">nan</td>
      <td id="T_d7db2_row7_col9" class="data row7 col9">nan</td>
      <td id="T_d7db2_row7_col10" class="data row7 col10">nan</td>
      <td id="T_d7db2_row7_col11" class="data row7 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row8" class="row_heading level0 row8">school_proximity</th>
      <td id="T_d7db2_row8_col0" class="data row8 col0">0.34</td>
      <td id="T_d7db2_row8_col1" class="data row8 col1">-0.38</td>
      <td id="T_d7db2_row8_col2" class="data row8 col2">0.43</td>
      <td id="T_d7db2_row8_col3" class="data row8 col3">0.03</td>
      <td id="T_d7db2_row8_col4" class="data row8 col4">-0.29</td>
      <td id="T_d7db2_row8_col5" class="data row8 col5">-0.31</td>
      <td id="T_d7db2_row8_col6" class="data row8 col6">-0.26</td>
      <td id="T_d7db2_row8_col7" class="data row8 col7">0.48</td>
      <td id="T_d7db2_row8_col8" class="data row8 col8">nan</td>
      <td id="T_d7db2_row8_col9" class="data row8 col9">nan</td>
      <td id="T_d7db2_row8_col10" class="data row8 col10">nan</td>
      <td id="T_d7db2_row8_col11" class="data row8 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row9" class="row_heading level0 row9">competitor_density</th>
      <td id="T_d7db2_row9_col0" class="data row9 col0">-0.44</td>
      <td id="T_d7db2_row9_col1" class="data row9 col1">0.17</td>
      <td id="T_d7db2_row9_col2" class="data row9 col2">-0.33</td>
      <td id="T_d7db2_row9_col3" class="data row9 col3">0.00</td>
      <td id="T_d7db2_row9_col4" class="data row9 col4">0.15</td>
      <td id="T_d7db2_row9_col5" class="data row9 col5">0.27</td>
      <td id="T_d7db2_row9_col6" class="data row9 col6">0.28</td>
      <td id="T_d7db2_row9_col7" class="data row9 col7">-0.40</td>
      <td id="T_d7db2_row9_col8" class="data row9 col8">-0.19</td>
      <td id="T_d7db2_row9_col9" class="data row9 col9">nan</td>
      <td id="T_d7db2_row9_col10" class="data row9 col10">nan</td>
      <td id="T_d7db2_row9_col11" class="data row9 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row10" class="row_heading level0 row10">household_affluency</th>
      <td id="T_d7db2_row10_col0" class="data row10 col0">0.59</td>
      <td id="T_d7db2_row10_col1" class="data row10 col1">-0.40</td>
      <td id="T_d7db2_row10_col2" class="data row10 col2">0.62</td>
      <td id="T_d7db2_row10_col3" class="data row10 col3">0.05</td>
      <td id="T_d7db2_row10_col4" class="data row10 col4">-0.62</td>
      <td id="T_d7db2_row10_col5" class="data row10 col5">-0.59</td>
      <td id="T_d7db2_row10_col6" class="data row10 col6">-0.51</td>
      <td id="T_d7db2_row10_col7" class="data row10 col7">0.54</td>
      <td id="T_d7db2_row10_col8" class="data row10 col8">0.34</td>
      <td id="T_d7db2_row10_col9" class="data row10 col9">-0.36</td>
      <td id="T_d7db2_row10_col10" class="data row10 col10">nan</td>
      <td id="T_d7db2_row10_col11" class="data row10 col11">nan</td>
    </tr>
    <tr>
      <th id="T_d7db2_level0_row11" class="row_heading level0 row11">normalised_sales</th>
      <td id="T_d7db2_row11_col0" class="data row11 col0">-0.45</td>
      <td id="T_d7db2_row11_col1" class="data row11 col1">0.36</td>
      <td id="T_d7db2_row11_col2" class="data row11 col2">-0.49</td>
      <td id="T_d7db2_row11_col3" class="data row11 col3">-0.07</td>
      <td id="T_d7db2_row11_col4" class="data row11 col4">0.69</td>
      <td id="T_d7db2_row11_col5" class="data row11 col5">0.38</td>
      <td id="T_d7db2_row11_col6" class="data row11 col6">0.27</td>
      <td id="T_d7db2_row11_col7" class="data row11 col7">-0.46</td>
      <td id="T_d7db2_row11_col8" class="data row11 col8">-0.45</td>
      <td id="T_d7db2_row11_col9" class="data row11 col9">0.34</td>
      <td id="T_d7db2_row11_col10" class="data row11 col10">-0.74</td>
      <td id="T_d7db2_row11_col11" class="data row11 col11">nan</td>
    </tr>
  </tbody>
</table>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">correlation_matrix</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="s">"normalised_sales"</span><span class="p">].</span><span class="n">sort_values</span><span class="p">(</span><span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>household_size           0.692506
proportion_newbuilds     0.380474
proportion_flats         0.355756
competitor_density       0.338284
public_transport_dist    0.268658
commercial_property     <span class="nt">-0</span>.065091
crime_rate              <span class="nt">-0</span>.445005
school_proximity        <span class="nt">-0</span>.447789
property_value          <span class="nt">-0</span>.463462
proportion_nonretail    <span class="nt">-0</span>.485237
household_affluency     <span class="nt">-0</span>.743277
normalised_sales              NaN
Name: normalised_sales, dtype: float64
</code></pre></div></div>

<p>Here is few information we can notice from the correlation matrix :</p>
<ul>
  <li>The highest correlated attribute is the proportion of new builds and public transport distribution.</li>
  <li>The property values and the proportion of non-retail commercial properties.</li>
  <li>Public transport distribution and proportion of non retails are negatively correlated.</li>
</ul>

<p>In terms of Pearson correlation with the target variable, we can see that the normalized sales are negatively correlated with the household_affluency but positively correlated with the household size.</p>

<h3 id="variable-distribution">Variable Distribution</h3>

<p>In the following section, we will analyze each variable deeper. For each variable,  we will draw a histogram and a boxplot. It will help to find out the outliers and the variable distribution. We will then plot a correlation between the variable and the normalized sales. If a feature has outlier values, we will have a deeper look at those and deal with them with the appropriate method.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">number_of_columns</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">columns</span><span class="p">)</span>
<span class="n">number_of_rows</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">fig</span><span class="p">,</span> <span class="n">axes</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="n">number_of_rows</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="n">number_of_columns</span> <span class="o">//</span> <span class="n">number_of_rows</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
<span class="n">fig</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">"Distribution of each feature"</span><span class="p">)</span>
<span class="k">for</span> <span class="n">column_index</span><span class="p">,</span> <span class="n">column</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">columns</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">column_index</span> <span class="o">==</span> <span class="n">number_of_columns</span><span class="p">:</span>
        <span class="k">continue</span>
    <span class="n">binwidth</span> <span class="o">=</span> <span class="mi">5</span>
    <span class="n">axe</span> <span class="o">=</span> <span class="n">axes</span><span class="p">[</span><span class="n">column_index</span> <span class="o">%</span> <span class="n">number_of_rows</span><span class="p">,</span> <span class="n">column_index</span> <span class="o">//</span> <span class="n">number_of_rows</span><span class="p">]</span>
    <span class="n">axe</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">store_df</span><span class="p">[</span><span class="n">column</span><span class="p">],</span> <span class="n">bins</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="mi">180</span><span class="o">/</span><span class="n">binwidth</span><span class="p">),</span>
             <span class="n">color</span> <span class="o">=</span> <span class="s">'blue'</span><span class="p">,</span> <span class="n">edgecolor</span> <span class="o">=</span> <span class="s">'black'</span><span class="p">)</span>
    
    <span class="c1"># Title and labels
</span>    <span class="n">axe</span><span class="p">.</span><span class="n">set_title</span><span class="p">(</span><span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">column</span><span class="si">}</span><span class="s"> distribution"</span><span class="p">,</span> <span class="n">pad</span><span class="o">=-</span><span class="mi">20</span><span class="p">)</span>
<span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_31_0.png" alt="png" class="center-image" /></p>

<h4 id="crime-rate">Crime Rate</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"crime_rate"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_33_0.png" alt="png" class="center-image" /></p>

<p>By analyzing the graph of the crime rate, we can see that the crime rate is not normally distributed but have a sort of logarithmic distribution.</p>

<p>As per the plot, we can find that the crime rate has some outlier values. For a deeper analysis, we will convert the crime rate into high, medium, and low categories.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">categorize_attribute</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">bins_range</span><span class="p">,</span> <span class="n">categories_names</span><span class="p">):</span>
    <span class="s">"""
    Categorize an attribute into bins
    """</span>
    <span class="n">intervals</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">IntervalIndex</span><span class="p">.</span><span class="n">from_tuples</span><span class="p">(</span><span class="n">bins_range</span><span class="p">)</span>
    <span class="n">bins</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">cut</span><span class="p">(</span><span class="n">store_df</span><span class="p">[</span><span class="n">attribute</span><span class="p">].</span><span class="n">values</span><span class="p">,</span> <span class="n">intervals</span><span class="p">,</span> <span class="n">labels</span><span class="o">=</span><span class="n">categories_names</span><span class="p">,</span> <span class="n">include_lowest</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">bins</span><span class="p">.</span><span class="n">categories</span> <span class="o">=</span> <span class="n">categories_names</span>
    <span class="k">return</span> <span class="n">bins</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">[</span><span class="s">'crime_rate_bin'</span><span class="p">]</span> <span class="o">=</span> <span class="n">categorize_attribute</span><span class="p">(</span><span class="s">"crime_rate"</span><span class="p">,</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">),</span> <span class="p">(</span><span class="mi">20</span><span class="p">,</span> <span class="mi">30</span><span class="p">)],</span> <span class="p">[</span><span class="s">"low"</span><span class="p">,</span> <span class="s">"medium"</span><span class="p">,</span> <span class="s">"high"</span><span class="p">])</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">crime_rate_bin</span><span class="p">.</span><span class="n">value_counts</span><span class="p">().</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'barh'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_37_1.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">store_df</span><span class="p">.</span><span class="n">crime_rate_bin</span> <span class="o">==</span> <span class="s">'high'</span><span class="p">]</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>crime_rate</th>
      <th>proportion_flats</th>
      <th>proportion_nonretail</th>
      <th>new_store</th>
      <th>commercial_property</th>
      <th>household_size</th>
      <th>proportion_newbuilds</th>
      <th>public_transport_dist</th>
      <th>transport_availability</th>
      <th>property_value</th>
      <th>school_proximity</th>
      <th>competitor_density</th>
      <th>household_affluency</th>
      <th>normalised_sales</th>
      <th>county</th>
      <th>crime_rate_bin</th>
    </tr>
    <tr>
      <th>location_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>127</th>
      <td>27.564994</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>17.50</td>
      <td>1.652</td>
      <td>0.0</td>
      <td>1.4672</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>396.90</td>
      <td>7.0700</td>
      <td>-1.337419</td>
      <td>c_52</td>
      <td>high</td>
    </tr>
    <tr>
      <th>249</th>
      <td>29.312878</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>16.45</td>
      <td>2.304</td>
      <td>10.9</td>
      <td>1.6475</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>127.36</td>
      <td>6.6600</td>
      <td>-1.348320</td>
      <td>c_23</td>
      <td>high</td>
    </tr>
    <tr>
      <th>61</th>
      <td>22.695937</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>17.50</td>
      <td>1.368</td>
      <td>8.8</td>
      <td>1.4395</td>
      <td>All transport options</td>
      <td>666</td>
      <td>NaN</td>
      <td>285.83</td>
      <td>7.6575</td>
      <td>-1.522736</td>
      <td>c_45</td>
      <td>high</td>
    </tr>
    <tr>
      <th>404</th>
      <td>25.534723</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>17.50</td>
      <td>2.000</td>
      <td>10.5</td>
      <td>1.5184</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>396.90</td>
      <td>7.9975</td>
      <td>-1.675350</td>
      <td>c_37</td>
      <td>high</td>
    </tr>
    <tr>
      <th>23</th>
      <td>20.435598</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>16.45</td>
      <td>3.434</td>
      <td>0.0</td>
      <td>1.8347</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>27.25</td>
      <td>7.2625</td>
      <td>-1.697152</td>
      <td>c_23</td>
      <td>high</td>
    </tr>
    <tr>
      <th>181</th>
      <td>28.302093</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>17.15</td>
      <td>2.987</td>
      <td>0.0</td>
      <td>1.5888</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>396.90</td>
      <td>6.6925</td>
      <td>-1.871568</td>
      <td>c_25</td>
      <td>high</td>
    </tr>
    <tr>
      <th>452</th>
      <td>20.902966</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>15.90</td>
      <td>1.138</td>
      <td>0.0</td>
      <td>1.1370</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>396.90</td>
      <td>9.4925</td>
      <td>-0.977686</td>
      <td>c_42</td>
      <td>high</td>
    </tr>
    <tr>
      <th>104</th>
      <td>28.025921</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>17.15</td>
      <td>2.349</td>
      <td>4.0</td>
      <td>1.7028</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>396.90</td>
      <td>4.9425</td>
      <td>-1.577241</td>
      <td>c_45</td>
      <td>high</td>
    </tr>
    <tr>
      <th>210</th>
      <td>24.917743</td>
      <td>0.0</td>
      <td>18.1</td>
      <td>no</td>
      <td>NaN</td>
      <td>2.818</td>
      <td>7.6</td>
      <td>1.8662</td>
      <td>All transport options</td>
      <td>666</td>
      <td>20.2</td>
      <td>391.45</td>
      <td>5.5275</td>
      <td>-1.337419</td>
      <td>c_24</td>
      <td>high</td>
    </tr>
  </tbody>
</table>
</div>

<p>Once we have grouped the crime rate by bins , let us visualize the normalize sales in those bins</p>

<h5 id="sales-per-crime-rate">Sales per Crime Rate</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mean_sales_per_crime_rate</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">'crime_rate_bin'</span><span class="p">).</span><span class="n">normalised_sales</span><span class="p">.</span><span class="n">mean</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mean_sales_per_crime_rate</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crime_rate_bin
low       0.131247
medium   <span class="nt">-0</span>.823125
high     <span class="nt">-1</span>.482766
Name: normalised_sales, dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">barplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">mean_sales_per_crime_rate</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">mean_sales_per_crime_rate</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:xlabel<span class="o">=</span><span class="s1">'normalised_sales'</span>, <span class="nv">ylabel</span><span class="o">=</span><span class="s1">'crime_rate_bin'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_43_1.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">'crime_rate_bin'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:xlabel<span class="o">=</span><span class="s1">'crime_rate_bin'</span>, <span class="nv">ylabel</span><span class="o">=</span><span class="s1">'normalised_sales'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_44_1.png" alt="png" class="center-image" /></p>

<p>We can confirm that the region with the lowest crime rate has the highest sales.</p>

<h4 id="proportion-of-flats">Proportion of Flats</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"proportion_flats"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_47_0.png" alt="png" class="center-image" /></p>

<p>As for the crime rate in the area, we can see that the proportion of flats in the area have outliers, and we can split it into two categories and analyze them.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">categories_bins</span> <span class="o">=</span> <span class="p">[(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">60</span><span class="p">),</span> <span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="n">store_df</span><span class="p">[</span><span class="s">"proportion_flats"</span><span class="p">].</span><span class="nb">max</span><span class="p">())]</span>
<span class="n">proportion_flats_bin</span> <span class="o">=</span> <span class="n">categorize_attribute</span><span class="p">(</span><span class="s">"proportion_flats"</span><span class="p">,</span> <span class="n">categories_bins</span><span class="p">,</span> <span class="p">[</span><span class="s">"low"</span><span class="p">,</span> <span class="s">"medium"</span><span class="p">,</span> <span class="s">"high"</span><span class="p">])</span>
<span class="n">store_df</span><span class="p">[</span><span class="s">'proportion_flats_bin'</span><span class="p">]</span> <span class="o">=</span> <span class="n">proportion_flats_bin</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">proportion_flats_bin</span><span class="p">.</span><span class="n">value_counts</span><span class="p">().</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'barh'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_50_1.png" alt="png" class="center-image" /></p>

<p>Upon binarizing the proportion of flats in the area, we can now visualize the normalized sales in those bins.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">'proportion_flats_bin'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:xlabel<span class="o">=</span><span class="s1">'proportion_flats_bin'</span>, <span class="nv">ylabel</span><span class="o">=</span><span class="s1">'normalised_sales'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_52_1.png" alt="png" class="center-image" /></p>

<p>As per the visualization, the area with low flats proportion has the lowest sales, whereas the area with high flats ratio has the highest sales.</p>

<p>This makes sense because the flats attract more people and those people will like to buy more in the stores.</p>

<h4 id="proportion-of-commercial-properties">Proportion of commercial properties.</h4>
<p>The next property we would like to analyze is the proportion of commercial properties in the area.</p>

<p>As per the documentation, this column contains the percentage of commercial properties in the area; therefore since it contains the percentage, we expect the values to be between 0 and 100. Unfortunately, we can see that some values are null and others are not between 0 and 200.</p>

<p><strong>We have around 29 null values; since we don‚Äôt have any information about the area without commercial properties, can we consider those nan values as 0?</strong> This is a question to ask the business or the data collector.</p>

<p>As of now, with more than 10 % of those values, I would consider dropping the attribute in the analysis and leverage the information from the proportion of non-retail, commercial properties.</p>

<h4 id="property-value-in-the-area">Property value in the Area</h4>

<p>The property values will help to find out how wealthy the area is. The area with expensive property will be more likely to have more sales.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">property_value</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>False    320
Name: property_value, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"property_value"</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_57_0.png" alt="png" class="center-image" /></p>

<p>From the plot, we can see two different bins of property values: one with values lower than 500 and another with values higher than 500.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">property_value_correlation</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s">"property_value"</span><span class="p">]].</span><span class="n">corrwith</span><span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">normalised_sales</span><span class="p">).</span><span class="n">values</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nb">round</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">relplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">"property_value"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_60_0.png" alt="png" class="center-image" /></p>

<p>We can see no clear linear correlation between property value and normalized sales. It seems to be negative with a Pearson coefficient of</p>

<p>Since we have two categories in the property values, we would like to split the columns into two categories and visualize the sales values within those categories.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">categories_bins</span> <span class="o">=</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">500</span><span class="p">),</span> <span class="p">(</span><span class="mi">500</span><span class="p">,</span> <span class="n">store_df</span><span class="p">[</span><span class="s">"property_value"</span><span class="p">].</span><span class="nb">max</span><span class="p">())]</span>
<span class="n">property_value_bin</span> <span class="o">=</span> <span class="n">categorize_attribute</span><span class="p">(</span><span class="s">"property_value"</span><span class="p">,</span> <span class="n">categories_bins</span><span class="p">,</span> <span class="p">[</span><span class="s">"low"</span><span class="p">,</span> <span class="s">"high"</span><span class="p">])</span>
<span class="n">store_df</span><span class="p">[</span><span class="s">'property_value_bin'</span><span class="p">]</span> <span class="o">=</span> <span class="n">property_value_bin</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">"property_value_bin"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:xlabel<span class="o">=</span><span class="s1">'property_value_bin'</span>, <span class="nv">ylabel</span><span class="o">=</span><span class="s1">'normalised_sales'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_64_1.png" alt="png" class="center-image" /></p>

<p>Looking at the property value itself, it seems to correlate with the sales negatively. The areas with the most expensive properties have the lowest sales. In contrast, the area with less expensive property has the highest sales.</p>

<p>The reason may be that we are not considering the ratio of commercial properties in the area.</p>

<p>Let us combine the property value and the proportion of retail property to get the values of non-retail property and analyze how they are correlated with the sales.</p>

<h5 id="proportion-of-non_retails">Proportion of non_retails</h5>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">proportion_nonretail</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>False    320
Name: proportion_nonretail, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"proportion_nonretail"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_68_0.png" alt="png" class="center-image" /></p>

<p>Let us combine the property values with the ration of non retails property in the area and visualize</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">[</span><span class="s">"ratio_property_value_nonretail"</span><span class="p">]</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">property_value</span> <span class="o">/</span> <span class="n">store_df</span><span class="p">.</span><span class="n">proportion_nonretail</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"ratio_property_value_nonretail"</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_71_0.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">relplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">"ratio_property_value_nonretail"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;seaborn.axisgrid.FacetGrid at 0x131bcbb10&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_72_1.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s">"ratio_property_value_nonretail"</span><span class="p">]].</span><span class="n">corrwith</span><span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">normalised_sales</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ratio_property_value_nonretail    0.300517
dtype: float64
</code></pre></div></div>

<p>Using the ratio, we cannot capture the correlation between the percentage of property values and the sales.</p>

<h4 id="retail-property-values">Retail Property Values</h4>

<p>Now let combine the property value with retail property values</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">[</span><span class="s">"retail_property_value"</span><span class="p">]</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">property_value</span>  <span class="o">-</span>  <span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">property_value</span> <span class="o">*</span> <span class="n">store_df</span><span class="p">.</span><span class="n">proportion_nonretail</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s">"commercial_property"</span><span class="p">,</span> <span class="s">"retail_property_value"</span><span class="p">,</span> <span class="s">"property_value"</span><span class="p">,</span> <span class="s">"normalised_sales"</span><span class="p">]].</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>commercial_property</th>
      <th>retail_property_value</th>
      <th>property_value</th>
      <th>normalised_sales</th>
    </tr>
    <tr>
      <th>location_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>464</th>
      <td>NaN</td>
      <td>545.4540</td>
      <td>666</td>
      <td>-0.399933</td>
    </tr>
    <tr>
      <th>504</th>
      <td>14.85</td>
      <td>253.5192</td>
      <td>264</td>
      <td>2.216308</td>
    </tr>
    <tr>
      <th>295</th>
      <td>7.70</td>
      <td>287.9660</td>
      <td>307</td>
      <td>0.166920</td>
    </tr>
    <tr>
      <th>187</th>
      <td>1.95</td>
      <td>293.2500</td>
      <td>300</td>
      <td>-0.083804</td>
    </tr>
    <tr>
      <th>193</th>
      <td>3.05</td>
      <td>252.6208</td>
      <td>256</td>
      <td>0.962693</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"retail_property_value"</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_78_0.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s">"retail_property_value"</span><span class="p">]].</span><span class="n">corrwith</span><span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">normalised_sales</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>retail_property_value   <span class="nt">-0</span>.438095
dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">relplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s">"retail_property_value"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;seaborn.axisgrid.FacetGrid at 0x131ec8e90&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_80_1.png" alt="png" class="center-image" /></p>

<p>The newly created variable negatively correlates with the normalized sales. The higher the retail property value, the lowers the sales. Therefore, we can assume that the most expensive property attracts fewer people.</p>

<p>After exploring the property attribute, we can visualize the household attributes.</p>

<h4 id="household-attributes">Household Attributes</h4>

<ul>
  <li><code class="language-bash highlighter-rouge">household_size</code>: mean household size in the area</li>
  <li><code class="language-bash highlighter-rouge">household_affluency</code>: mean household affluency in the area (higher means more affluent)</li>
</ul>

<p>These attributes hold different household information. For example, they contain the household size and the household affluence.</p>

<p>We will assume that the larger household size in the area yields more sales. Or the more affluent the house is, the more sales we have in the region. We can also combine the two variables in the household ratio and visualize how they correlate with the target variable.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">household_size</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>False    320
Name: household_size, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">household_affluency</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>False    320
Name: household_affluency, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"household_affluency"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_85_0.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"household_size"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_86_0.png" alt="png" class="center-image" /></p>

<p>We can see that those attributes seem to be generally distributed without outliers.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s">"household_size"</span><span class="p">,</span> <span class="s">"household_affluency"</span><span class="p">,</span> <span class="s">"normalised_sales"</span><span class="p">]].</span><span class="n">corr</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>household_size</th>
      <th>household_affluency</th>
      <th>normalised_sales</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>household_size</th>
      <td>1.000000</td>
      <td>-0.618884</td>
      <td>0.692506</td>
    </tr>
    <tr>
      <th>household_affluency</th>
      <td>-0.618884</td>
      <td>1.000000</td>
      <td>-0.743277</td>
    </tr>
    <tr>
      <th>normalised_sales</th>
      <td>0.692506</td>
      <td>-0.743277</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">relplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">"household_size"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">,</span>  <span class="n">hue</span><span class="o">=</span><span class="s">"property_value_bin"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;seaborn.axisgrid.FacetGrid at 0x131f734d0&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_89_1.png" alt="png" class="center-image" /></p>

<p>Looking at the regression plot, we found that household size greater than two have lower property values, and we can see the linear relationship between the household size and the normalized sales.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">relplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">"household_affluency"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="s">"property_value_bin"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;seaborn.axisgrid.FacetGrid at 0x13206e610&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_91_1.png" alt="png" class="center-image" /></p>

<p>We can see that two attributes are correlated with each other on the one hand. However, on the other hand, household size is positively correlated with sales, whereas household affluence is negatively correlated with sales.</p>

<p>Let us create a ratio of the household size and the household affluence and evaluate how it will be correlated with the target variable.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">[</span><span class="s">"household_ratio"</span><span class="p">]</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">household_size</span> <span class="o">/</span> <span class="n">store_df</span><span class="p">.</span><span class="n">household_affluency</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"household_ratio"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_94_0.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">relplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">"household_ratio"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="s">"property_value_bin"</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;seaborn.axisgrid.FacetGrid at 0x131e20910&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_95_1.png" alt="png" class="center-image" /></p>

<p>An exciting property of that plot is that the new household ratio is highly correlated with sales. By looking at the property values, we noticed that the most expensive property also has a lower household ratio and therefore lowers sales.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s">"household_size"</span><span class="p">,</span> <span class="s">"household_affluency"</span><span class="p">,</span> <span class="s">"normalised_sales"</span><span class="p">,</span> <span class="s">"household_ratio"</span><span class="p">]].</span><span class="n">corr</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>household_size</th>
      <th>household_affluency</th>
      <th>normalised_sales</th>
      <th>household_ratio</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>household_size</th>
      <td>1.000000</td>
      <td>-0.618884</td>
      <td>0.692506</td>
      <td>0.741650</td>
    </tr>
    <tr>
      <th>household_affluency</th>
      <td>-0.618884</td>
      <td>1.000000</td>
      <td>-0.743277</td>
      <td>-0.703458</td>
    </tr>
    <tr>
      <th>normalised_sales</th>
      <td>0.692506</td>
      <td>-0.743277</td>
      <td>1.000000</td>
      <td>0.819967</td>
    </tr>
    <tr>
      <th>household_ratio</th>
      <td>0.741650</td>
      <td>-0.703458</td>
      <td>0.819967</td>
      <td>1.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p>By combining the both variable into the household ratio, we have found out that the ration is highly correlated with the target variable with a pearson correlation coefficient of 0.81.</p>

<h4 id="new-store-distribution">New store distribution</h4>

<p>The new store distribution attribute tells us if the store is recent or not; we can assume that recent stores have fewer sales than older stores. Because we people are more likely to buy from the old stores, let us look at the data and how it spread within the stores.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">new_store</span><span class="p">.</span><span class="n">value_counts</span><span class="p">().</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'barh'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_100_1.png" alt="png" class="center-image" /></p>

<p>As per the barplot we can see that we have more old stores than new one , in the areas.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">'new_store'</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:xlabel<span class="o">=</span><span class="s1">'new_store'</span>, <span class="nv">ylabel</span><span class="o">=</span><span class="s1">'normalised_sales'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_102_1.png" alt="png" class="center-image" /></p>

<p>We can not confirm our assumption, but the opposite is accurate we can see that the new stores have more sales than the old ones. But this can be taken with reserve, as we can see that we have more old stores than new stores in the dataset. We can find another metric that is weighted by the number of elements we have in each category.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">new_store</span><span class="p">.</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>no     301
<span class="nb">yes     </span>19
Name: new_store, dtype: int64
</code></pre></div></div>

<h4 id="competitor-density">Competitor density</h4>

<p>Let‚Äôs analyze the effect of competitor density on sales.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">competitor_density</span><span class="p">.</span><span class="nb">max</span><span class="p">(</span>
<span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>396.9
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"competitor_density"</span><span class="p">,</span> <span class="mi">50</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_107_0.png" alt="png" class="center-image" /></p>

<p>As per the graph, we can see that the chart following is left-skewed, with more regions with a higher density of competitors.
Binarization may be helpful here.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">[</span><span class="s">"competitor_density_bin"</span><span class="p">]</span> <span class="o">=</span> <span class="n">categorize_attribute</span><span class="p">(</span><span class="s">"competitor_density"</span><span class="p">,</span> <span class="p">[(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">300</span><span class="p">),</span> <span class="p">(</span><span class="mi">300</span><span class="p">,</span> <span class="mi">400</span><span class="p">)],</span> <span class="p">[</span><span class="s">"low"</span><span class="p">,</span> <span class="s">"high"</span><span class="p">])</span>

</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">"competitor_density_bin"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:xlabel<span class="o">=</span><span class="s1">'competitor_density_bin'</span>, <span class="nv">ylabel</span><span class="o">=</span><span class="s1">'normalised_sales'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_110_1.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s">"competitor_density"</span><span class="p">]].</span><span class="n">corrwith</span><span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">normalised_sales</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>competitor_density    0.338284
dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">relplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s">"competitor_density"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;seaborn.axisgrid.FacetGrid at 0x1318d6e10&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_112_1.png" alt="png" class="center-image" /></p>

<p>Even after binarizing the attribute, we found that the region with higher competitors tends to have higher sales. The correct explanation is that competitors tend to establish their stores in the area, which is attractive in terms of sales. They have done the analysis before and found a viable market in the region, and the demand is high, so they have established their stores.</p>

<h4 id="transport-availability">Transport Availability</h4>

<p>This illustrates the availability of different transport in the area; this attribute can help us to assess how accessible a shop is; a more accessible shop should be expected to have more sales.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">transport_availability</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>False    320
Name: transport_availability, dtype: int64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">transport_availability</span><span class="p">.</span><span class="n">value_counts</span><span class="p">().</span><span class="n">plot</span><span class="p">(</span><span class="n">kind</span><span class="o">=</span><span class="s">'barh'</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:&gt;
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_116_1.png" alt="png" class="center-image" /></p>

<p>In those categories , let us visualize the mean of of the sales.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">store_df</span><span class="p">.</span><span class="n">transport_availability</span><span class="p">.</span><span class="nb">str</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="n">expand</span><span class="o">=</span><span class="bp">True</span><span class="p">)[</span><span class="mi">0</span><span class="p">],</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;AxesSubplot:xlabel<span class="o">=</span><span class="s1">'0'</span>, <span class="nv">ylabel</span><span class="o">=</span><span class="s1">'normalised_sales'</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_118_1.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">"transport_availability"</span><span class="p">).</span><span class="n">agg</span><span class="p">({</span><span class="s">"normalised_sales"</span><span class="p">:</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">x</span><span class="p">).</span><span class="n">mean</span><span class="p">()})</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>normalised_sales</th>
    </tr>
    <tr>
      <th>transport_availability</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>All transport options</th>
      <td>0.903049</td>
    </tr>
    <tr>
      <th>Average transport options</th>
      <td>0.699405</td>
    </tr>
    <tr>
      <th>Few transport options</th>
      <td>0.515991</td>
    </tr>
    <tr>
      <th>Many transport options</th>
      <td>0.656850</td>
    </tr>
    <tr>
      <th>No transport options</th>
      <td>0.679603</td>
    </tr>
  </tbody>
</table>
</div>

<p>We can see that the transport availability is not linear correlated with the sales and the few locations with higher sales are spread out in different transport availability categories.</p>

<h4 id="public-transport-distribution">Public Transport Distribution</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">public_transport_dist</span><span class="p">.</span><span class="n">isna</span><span class="p">().</span><span class="n">value_counts</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>False    320
Name: public_transport_dist, dtype: int64
</code></pre></div></div>

<p>There is no null values of the public transport distribution , let us now visualize the distribution of the public transport distribution</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"public_transport_dist"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_124_0.png" alt="png" class="center-image" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">public_transport_dist</span><span class="p">.</span><span class="nb">max</span><span class="p">()</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>10.7103
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">to_drop_index</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">store_df</span><span class="p">.</span><span class="n">public_transport_dist</span> <span class="o">==</span> <span class="n">store_df</span><span class="p">.</span><span class="n">public_transport_dist</span><span class="p">.</span><span class="nb">max</span><span class="p">()].</span><span class="n">index</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="n">to_drop_index</span><span class="p">,</span> <span class="n">inplace</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="p">[</span><span class="s">"public_transport_dist"</span><span class="p">]].</span><span class="n">corrwith</span><span class="p">(</span><span class="n">store_df</span><span class="p">.</span><span class="n">normalised_sales</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>public_transport_dist    0.279198
dtype: float64
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">visualize_attribute</span><span class="p">(</span><span class="s">"public_transport_dist"</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_129_0.png" alt="png" class="center-image" /></p>

<p>But we can clearly see that it does not have any linear correlation with the target variable.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">head</span><span class="p">()</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>crime_rate</th>
      <th>proportion_flats</th>
      <th>proportion_nonretail</th>
      <th>new_store</th>
      <th>commercial_property</th>
      <th>household_size</th>
      <th>proportion_newbuilds</th>
      <th>public_transport_dist</th>
      <th>transport_availability</th>
      <th>property_value</th>
      <th>...</th>
      <th>household_affluency</th>
      <th>normalised_sales</th>
      <th>county</th>
      <th>crime_rate_bin</th>
      <th>proportion_flats_bin</th>
      <th>property_value_bin</th>
      <th>ratio_property_value_nonretail</th>
      <th>retail_property_value</th>
      <th>household_ratio</th>
      <th>competitor_density_bin</th>
    </tr>
    <tr>
      <th>location_id</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>464</th>
      <td>17.600541</td>
      <td>0.0</td>
      <td>18.10</td>
      <td>no</td>
      <td>NaN</td>
      <td>2.926</td>
      <td>29.0</td>
      <td>2.9084</td>
      <td>All transport options</td>
      <td>666</td>
      <td>...</td>
      <td>4.5325</td>
      <td>-0.399933</td>
      <td>c_40</td>
      <td>medium</td>
      <td>low</td>
      <td>high</td>
      <td>36.795580</td>
      <td>545.4540</td>
      <td>0.645560</td>
      <td>high</td>
    </tr>
    <tr>
      <th>504</th>
      <td>0.603556</td>
      <td>20.0</td>
      <td>3.97</td>
      <td>no</td>
      <td>14.85</td>
      <td>4.520</td>
      <td>10.6</td>
      <td>2.1398</td>
      <td>Average transport options</td>
      <td>264</td>
      <td>...</td>
      <td>1.8150</td>
      <td>2.216308</td>
      <td>c_80</td>
      <td>low</td>
      <td>medium</td>
      <td>low</td>
      <td>66.498741</td>
      <td>253.5192</td>
      <td>2.490358</td>
      <td>high</td>
    </tr>
    <tr>
      <th>295</th>
      <td>0.606810</td>
      <td>0.0</td>
      <td>6.20</td>
      <td>no</td>
      <td>7.70</td>
      <td>2.981</td>
      <td>31.9</td>
      <td>3.6715</td>
      <td>Many transport options</td>
      <td>307</td>
      <td>...</td>
      <td>2.9125</td>
      <td>0.166920</td>
      <td>c_53</td>
      <td>low</td>
      <td>low</td>
      <td>low</td>
      <td>49.516129</td>
      <td>287.9660</td>
      <td>1.023519</td>
      <td>high</td>
    </tr>
    <tr>
      <th>187</th>
      <td>0.012385</td>
      <td>55.0</td>
      <td>2.25</td>
      <td>no</td>
      <td>1.95</td>
      <td>3.453</td>
      <td>68.1</td>
      <td>7.3073</td>
      <td>No transport options</td>
      <td>300</td>
      <td>...</td>
      <td>2.0575</td>
      <td>-0.083804</td>
      <td>c_65</td>
      <td>low</td>
      <td>medium</td>
      <td>low</td>
      <td>133.333333</td>
      <td>293.2500</td>
      <td>1.678250</td>
      <td>high</td>
    </tr>
    <tr>
      <th>193</th>
      <td>0.016182</td>
      <td>100.0</td>
      <td>1.32</td>
      <td>no</td>
      <td>3.05</td>
      <td>3.816</td>
      <td>59.5</td>
      <td>8.3248</td>
      <td>Average transport options</td>
      <td>256</td>
      <td>...</td>
      <td>0.9875</td>
      <td>0.962693</td>
      <td>c_97</td>
      <td>low</td>
      <td>high</td>
      <td>low</td>
      <td>193.939394</td>
      <td>252.6208</td>
      <td>3.864304</td>
      <td>high</td>
    </tr>
  </tbody>
</table>
<p>5 rows √ó 22 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="n">relplot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">"public_transport_dist"</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">,</span> <span class="n">hue</span><span class="o">=</span><span class="s">"transport_availability"</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_132_0.png" alt="png" class="center-image" /></p>

<p>By combining the public transport distribution with the transport availability , there is no clear correlation between the two variables.</p>

<h4 id="school-proximity">School Proximity</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">school_proximity</span><span class="p">.</span><span class="nb">min</span>
</code></pre></div></div>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&lt;bound method NDFrame._add_numeric_operations.&lt;locals&gt;.min of location_id
464    20.2
504    13.0
295    17.4
187    15.3
193    15.1
       ... 
106    15.2
24     13.0
473    21.0
76      NaN
401    17.6
Name: school_proximity, Length: 319, dtype: float64&gt;
</code></pre></div></div>

<p>We can see that columns has missing values ,</p>
<ul>
  <li>an idea before continuing may be to fill those values with the mean of the attribute.</li>
  <li>Or since the columns have more than 20 % of missing  values we can consider dropping them and leverage the information from the other columns.</li>
</ul>

<h4 id="county">County</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">store_df</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">"county"</span><span class="p">).</span><span class="n">aggregate</span><span class="p">({</span><span class="s">"normalised_sales"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">}).</span><span class="n">sort_values</span><span class="p">(</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>normalised_sales</th>
    </tr>
    <tr>
      <th>county</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>c_137</th>
      <td>2.968477</td>
    </tr>
    <tr>
      <th>c_144</th>
      <td>2.968477</td>
    </tr>
    <tr>
      <th>c_112</th>
      <td>2.968477</td>
    </tr>
    <tr>
      <th>c_114</th>
      <td>2.968477</td>
    </tr>
    <tr>
      <th>c_122</th>
      <td>2.968477</td>
    </tr>
    <tr>
      <th>...</th>
      <td>...</td>
    </tr>
    <tr>
      <th>c_0</th>
      <td>-1.424627</td>
    </tr>
    <tr>
      <th>c_25</th>
      <td>-1.438253</td>
    </tr>
    <tr>
      <th>c_30</th>
      <td>-1.451879</td>
    </tr>
    <tr>
      <th>c_24</th>
      <td>-1.517285</td>
    </tr>
    <tr>
      <th>c_32</th>
      <td>-1.533637</td>
    </tr>
  </tbody>
</table>
<p>98 rows √ó 1 columns</p>
</div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sales_by_count_sorted</span> <span class="o">=</span> <span class="n">store_df</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">"county"</span><span class="p">).</span><span class="n">aggregate</span><span class="p">({</span><span class="s">"normalised_sales"</span><span class="p">:</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">}).</span><span class="n">sort_values</span><span class="p">(</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">ascending</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fig</span><span class="p">,</span> <span class="n">axe</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">25</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">sns</span><span class="p">.</span><span class="n">boxplot</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="s">"normalised_sales"</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="s">"county"</span><span class="p">,</span> <span class="n">data</span><span class="o">=</span><span class="n">store_df</span><span class="p">,</span> <span class="n">order</span><span class="o">=</span><span class="n">sales_by_count_sorted</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">axe</span><span class="p">)</span>
<span class="n">axe</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="s">'x'</span><span class="p">,</span> <span class="n">labelrotation</span><span class="o">=</span><span class="mi">90</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/source/assets/posts/eda/Exploratory-data-analysis/Exploratory-data-analysis_140_0.png" alt="png" class="center-image" /></p>

<p>As per the plot we can see that the sales are are higher in some region , but lowers in other region , we can do further analysis to find out what are affecting the sales in those regions.</p>

<h3 id="conclusion-on-the-data-analysis">Conclusion on the Data Analysis:</h3>

<p>We have just completed our exploratory data analysis. In this section, we understood the distribution of the variables,  the correlation between each variable and the target attribute, and finally, we explored different ways of combining the features.</p>

<p>As per our analysis, here are our key findings :</p>

<h4 id="linear-correlations-with-the-target-variable">Linear Correlations with the target variable</h4>

<ul>
  <li>We have found that by splitting the crime rate into different categories, we discovered that the crime rate is negatively correlated with sales. Therefore, the region with a higher crime rate has lower sales.</li>
  <li>We found a strong linear correlation between the household ratio and the number of sales. The household ratio is defined as of the  household size divided by the  household affluency.</li>
  <li>We found that the more competitor in the region, the higher are the sales in that region.</li>
  <li>We found that there seems not to be a clear linear correlation between the transport attributes and the sales.</li>
  <li>We found that the property values are negatively correlated with the sales, the more expensive the property values in the region, the lower the rates in the area.</li>
  <li>We created a new variable combining the property values and the ratio of non-retail property and found that the ratio is silghly correlated with the sales.</li>
  <li>We found that the region with a higher proportion of flats seems to have higher sales.</li>
  <li>We found that the higher sales in the dataset came from the specific county. For now, we didn‚Äôt dive deeper into that attribute to find out if that may be a random phenomenon.</li>
</ul>

<h4 id="variables-with-missing-values">Variables with Missing values:</h4>

<ul>
  <li>We found that the school_proximity and the commercial property values have more than 9 % of missing values. For the further steps, we decided not to use those values for the machine learning modeling and will ask the business to collect more data about the missing values.</li>
</ul>

<h4 id="other-important-attributes-that-may-be-useful">Other important attributes that may be useful:</h4>

<ul>
  <li>
    <p>We found that <em>demographic data</em> about the region may be necessary for our analysis. Attributes such as the population‚Äôs median age may be important for our analysis.</p>
  </li>
  <li>
    <p><em>Geo coordinates</em> information can also be necessary for our analysis. It could be useful if we have latitude and longitude information for every location.</p>
  </li>
  <li>
    <p>On a more general notes, collecting more samples and filling the missing data could be usefull for the analysis.</p>
  </li>
</ul>

<p>Add this notebook https://jaketae.github.io/blog/jupyter-automation/</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
</code></pre></div></div>
:ET